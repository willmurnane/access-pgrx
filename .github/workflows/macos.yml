name: Macos

"on":
  push:
    paths:
      - ".github/workflows/macos.yml"
      - "Cargo.toml"
      - "Cargo.lock"
      - "src/**"
      - "access_pgrx.control"

env:
  CARGO_TERM_COLOR: always
  SCCACHE_VERSION: v0.12.0
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

jobs:
  build_mac:
    name: MacOS build & test
    runs-on: ${{ matrix.platform }}
    env:
      RUSTC_WRAPPER: sccache
      SCCACHE_DIR: /Users/runner/Library/Caches/Mozilla.sccache
      SCCACHE_IDLE_TIMEOUT: 0

    strategy:
      matrix:
        platform: ["macos-15", "macos-15-intel"]
        version: [13, 14, 15, 16, 17, 18]
      # Continue trying all remaining builds, even if one fails.
      fail-fast: false
    steps:
      - uses: Homebrew/actions/setup-homebrew@master

      # install postgres with homebrew, but do't let homebrew do an update too.  The update
      # process not only takes forever, but it tends to fail when the internet changes
      #       https://github.com/Homebrew/brew/issues/1670#issuecomment-267096602
      - name: brew install postgresql
        run: |
          HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1 brew install ${FORMULA}
          echo "$(brew --prefix ${FORMULA})/bin" >> $GITHUB_PATH
        env:
          FORMULA: postgresql@${{ matrix.version }}
      - uses: actions/checkout@v4
      - name: Set up prerequisites and environment
        run: |
          echo "----- Install sccache -----"
          export arch=$(uname -m)
          if [[ "$arch" == "arm64" ]]; then
            export arch=aarch64
          fi
          curl -L https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/sccache-${SCCACHE_VERSION}-${arch}-apple-darwin.tar.gz | tar xz
          mv -f sccache-${SCCACHE_VERSION}*/sccache /usr/local/bin
          rm -rf sccache-${SCCACHE_VERSION}*
          chmod +x /usr/local/bin/sccache
          mkdir -p $SCCACHE_DIR
          sccache --version

          echo "----- Getting pre-installed Postgres major version -----"
          PG_VER=$(pg_config --version | awk '{split($2,a,"."); print a[1]}')
          echo "PG_VER=$PG_VER" >> $GITHUB_ENV
          cat $GITHUB_ENV

          echo "----- Set up Postgres permissions -----"
          sudo chmod a+rwx `$(which pg_config) --pkglibdir` `$(which pg_config) --sharedir`/extension
          # ls -lath `$(which pg_config) --pkglibdir` `$(which pg_config) --sharedir`/extension
          echo "----- Outputting env -----"
          env
          echo ""
      - name: Cache sccache directory
        uses: actions/cache@v4
        continue-on-error: false
        with:
          path: /Users/runner/Library/Caches/Mozilla.sccache
          key: pgrx-sccache-${{matrix.platform}}-${{ hashFiles('**/Cargo.lock', '.github/workflows/macos.yml', '.cargo/config.toml') }}
      - name: Cache cargo directory
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo
          key: pgrx-cargo-${{matrix.platform}}-tests-${{ hashFiles('**/Cargo.lock', '.github/workflows/macos.yml', '.cargo/config.toml') }}
      - name: Start sccache server
        run: sccache --start-server
      - name: Print sccache stats
        run: sccache --show-stats
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install cargo-pgrx
        run: cargo install cargo-pgrx
      - name: Print sccache stats
        run: sccache --show-stats
      - name: Run 'cargo pgrx init'
        run: |
          set -x
          cargo pgrx init --pg${{ matrix.version }} $(which pg_config)
      - name: Build release
        run: cargo pgrx package --features pg${{ matrix.version}} --no-default-features
      - name: Tar
        run: tar -C target/release/access_pgrx-pg${{ matrix.version }} -czvf target/access-pg${{ matrix.version }}-${{ matrix.platform }}.tar.gz .
      - uses: actions/upload-artifact@v4
        with:
          name: access_pgrx-pg${{ matrix.version }}-${{ matrix.platform }}
          path: target/access-pg${{ matrix.version }}-${{ matrix.platform }}.tar.gz
      - name: Print sccache stats
        run: sccache --show-stats
      - name: Stop sccache server
        run: sccache --stop-server || true
